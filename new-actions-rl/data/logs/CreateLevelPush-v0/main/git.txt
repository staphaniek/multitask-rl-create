ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..e66b05d 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove([self.space.bodies, self.space.shapes, self.space.constraints])
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..cb6b009 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..cb6b009 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..01c5efb 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,6 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
+            print(v)
             x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..4847c66 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,8 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            print(v)
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..3801f41 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt(sum(x.shape.body.velocity * x.shape.body.velocity))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..1d40d86 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt(sum(x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..e8ce1bc 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(bucket.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..13ad978 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(cannon.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..b1670c2 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -37,9 +37,9 @@ class BasicObj(object):
 
     def remove_from_space(self, space):
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies,
+            self.attached_shapes,
+            self.attached_constraints
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..e8ce1bc 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(bucket.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..13ad978 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(cannon.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..b1670c2 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -37,9 +37,9 @@ class BasicObj(object):
 
     def remove_from_space(self, space):
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies,
+            self.attached_shapes,
+            self.attached_constraints
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..e8ce1bc 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(bucket.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..215f1e4 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..b1670c2 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -37,9 +37,9 @@ class BasicObj(object):
 
     def remove_from_space(self, space):
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies,
+            self.attached_shapes,
+            self.attached_constraints
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..215f1e4 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..0517872 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,10 +36,11 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
+        print(len(self.attached_bodies))
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies,
+            self.attached_shapes,
+            self.attached_constraints
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..215f1e4 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..2c5ad68 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -37,9 +37,9 @@ class BasicObj(object):
 
     def remove_from_space(self, space):
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies[0],
+            self.attached_shapes[0],
+            self.attached_constraints[0]
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..215f1e4 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..0f7d9ce 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(funnel.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..2c5ad68 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -37,9 +37,9 @@ class BasicObj(object):
 
     def remove_from_space(self, space):
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies[0],
+            self.attached_shapes[0],
+            self.attached_constraints[0]
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..215f1e4 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..2c5ad68 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -37,9 +37,9 @@ class BasicObj(object):
 
     def remove_from_space(self, space):
         space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
+            self.attached_bodies[0],
+            self.attached_shapes[0],
+            self.attached_constraints[0]
             )
 
     def render(self, screen, scale=None, anti_alias=False):
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..faf60ec 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.img.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..863fe62 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,11 +36,12 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
-        space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
-            )
+        if len(self.attached_shapes) > 0:
+                space.remove(
+                    self.attached_bodies[0],
+                    self.attached_shapes[0],
+                    self.attached_constraints[0]
+                    )
 
     def render(self, screen, scale=None, anti_alias=False):
         raise NotImplemented('not implemented')
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..faf60ec 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add(self.img.get_body(), cannon)
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..863fe62 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,11 +36,12 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
-        space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
-            )
+        if len(self.attached_shapes) > 0:
+                space.remove(
+                    self.attached_bodies[0],
+                    self.attached_shapes[0],
+                    self.attached_constraints[0]
+                    )
 
     def render(self, screen, scale=None, anti_alias=False):
         raise NotImplemented('not implemented')
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..317d5c2 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,7 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
-        space.add(cannon)
+        space.add([self.get_body(), cannon])
         self.attached_shapes.append(cannon)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..863fe62 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,11 +36,12 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
-        space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
-            )
+        if len(self.attached_shapes) > 0:
+                space.remove(
+                    self.attached_bodies[0],
+                    self.attached_shapes[0],
+                    self.attached_constraints[0]
+                    )
 
     def render(self, screen, scale=None, anti_alias=False):
         raise NotImplemented('not implemented')
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..06bef91 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,6 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
+        space.add(self.get_body())
         space.add(cannon)
         self.attached_shapes.append(cannon)
 
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..863fe62 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,11 +36,12 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
-        space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
-            )
+        if len(self.attached_shapes) > 0:
+                space.remove(
+                    self.attached_bodies[0],
+                    self.attached_shapes[0],
+                    self.attached_constraints[0]
+                    )
 
     def render(self, screen, scale=None, anti_alias=False):
         raise NotImplemented('not implemented')
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..cd68bc8 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,6 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
+        space.add(self.get_body())
         space.add(cannon)
         self.attached_shapes.append(cannon)
 
@@ -93,6 +94,7 @@ class Fan(FixedRect):
         fan.collision_type = self.collision_type
         fan.properties = self.launch_dir
         self.shape = fan
+        space.add(self.get_body())
         space.add(fan)
         self.attached_shapes.append(fan)
 
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..863fe62 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,11 +36,12 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
-        space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
-            )
+        if len(self.attached_shapes) > 0:
+                space.remove(
+                    self.attached_bodies[0],
+                    self.attached_shapes[0],
+                    self.attached_constraints[0]
+                    )
 
     def render(self, screen, scale=None, anti_alias=False):
         raise NotImplemented('not implemented')
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..cd68bc8 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,6 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
+        space.add(self.get_body())
         space.add(cannon)
         self.attached_shapes.append(cannon)
 
@@ -93,6 +94,7 @@ class Fan(FixedRect):
         fan.collision_type = self.collision_type
         fan.properties = self.launch_dir
         self.shape = fan
+        space.add(self.get_body())
         space.add(fan)
         self.attached_shapes.append(fan)
 
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
ed09906ce33a6af77bef2e641a45f81306d2f1d4
diff --git a/arguments.py b/arguments.py
index dfc38fb..ec94316 100644
--- a/arguments.py
+++ b/arguments.py
@@ -14,7 +14,8 @@ def grid_args(args):
     set_if_none(args, 'exp_type', 'rnd')
 
     set_if_none(args, 'onehot_state', True)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'sample_clusters', False)
     set_if_none(args, 'action_set_size', 50)
     set_if_none(args, 'test_action_set_size', 50)
@@ -49,7 +50,8 @@ def grid_play_args(args):
         args.n_trajectories = 672
 
     set_if_none(args, 'emb_epochs', 10000)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 16)
     set_if_none(args, 'z_dim', 16)
     set_if_none(args, 'onehot_state', True)
@@ -66,7 +68,8 @@ def grid_play_args(args):
 
 
 def create_args(args):
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
 
     set_if_none(args, 'exp_type', 'NewMain')
     set_if_none(args, 'sample_clusters', False)
@@ -124,15 +127,18 @@ def create_play_args(args):
         args.hidden_dim_option = 128
         args.prefix = 'VideoCreate'
 
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
     args.action_random_sample = False
 
 def stack_args(args):
     set_if_none(args, 'exp_type', 'rnd')
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'action_set_size', 20)
     set_if_none(args, 'test_action_set_size', 20)
     set_if_none(args, 'separate_skip', True)
@@ -172,7 +178,8 @@ def stack_play_args(args):
     set_if_none(args, 'exp_type', 'rnd')
     set_if_none(args, 'o_dim', 128)
     set_if_none(args, 'z_dim', 128)
-    set_if_none(args, 'num_processes', 32)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
     set_if_none(args, 'emb_epochs', 5000)
 
     if args.train_embeddings and args.n_trajectories == 1024:
@@ -196,8 +203,10 @@ def reco_args(args):
         set_if_none(args, 'action_set_size', 25)
     else:
         set_if_none(args, 'action_set_size', 500)
-    set_if_none(args, 'num_processes', 32)
-    set_if_none(args, 'eval_num_processes', 8)
+    # set_if_none(args, 'num_processes', 32)
+    set_if_none(args, 'num_processes', 1)
+    # set_if_none(args, 'eval_num_processes', 8)
+    set_if_none(args, 'eval_num_processes', 1)
     set_if_none(args, 'num_eval', 20)
     set_if_none(args, 'entropy_coef', 1e-2)
     set_if_none(args, 'test_action_set_size', 50)
diff --git a/envs/create_game/base_env.py b/envs/create_game/base_env.py
index 35ae827..987066c 100644
--- a/envs/create_game/base_env.py
+++ b/envs/create_game/base_env.py
@@ -123,8 +123,9 @@ class BaseEnv(gym.Env):
         Reset the environment
         """
         self._check_setup()
-        self.space.remove([*self.space.bodies, *self.space.shapes,
-                           *self.space.constraints])
+        # self.space.remove([*self.space.bodies, *self.space.shapes,
+        #                   *self.space.constraints])
+        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
 
         self.ball_traces = []
         self.line_traces = []
diff --git a/envs/create_game/create_game.py b/envs/create_game/create_game.py
index ee5f677..968b4cd 100644
--- a/envs/create_game/create_game.py
+++ b/envs/create_game/create_game.py
@@ -241,7 +241,7 @@ class CreateGame(BaseEnv):
 
     def motion_stopped(self):
         all_objs = self.get_all_objs()
-        vel = np.array([np.sqrt(sum(x.shape.body.velocity ** 2))
+        vel = np.array([np.sqrt((x.shape.body.velocity.x **2 + x.shape.body.velocity.y ** 2))
                         for x in all_objs])
         if (vel < self.settings.min_velocity).all():
             self.zero_vel_steps += 1
diff --git a/envs/create_game/tools/ball.py b/envs/create_game/tools/ball.py
index 052cb47..807ce36 100644
--- a/envs/create_game/tools/ball.py
+++ b/envs/create_game/tools/ball.py
@@ -52,9 +52,10 @@ class Ball(GravityObj):
         if self.color == 'basketball':
             self.img.render(screen, scale, self.flipy)
         else:
-            draw_pos = scale * self.flipy(self.body.position)
-            draw_pos[0] = int(draw_pos[0])
-            draw_pos[1] = int(draw_pos[1])
+            draw_pos1 = scale * self.flipy(self.body.position)
+            draw_pos = pymunk.Vec2d(int(draw_pos1[0]), int(draw_pos1[1]))
+            # draw_pos[0] = int(draw_pos1[0])
+            # draw_pos[1] = int(draw_pos1[1])
 
             if self.is_trace:
                 draw_radius = max(2, int(scale * self.radius) // self.scale_radius)
diff --git a/envs/create_game/tools/basic_obj.py b/envs/create_game/tools/basic_obj.py
index 86e48c4..c1b293f 100644
--- a/envs/create_game/tools/basic_obj.py
+++ b/envs/create_game/tools/basic_obj.py
@@ -36,11 +36,12 @@ class BasicObj(object):
         self.attached_shapes.append(self.shape)
 
     def remove_from_space(self, space):
-        space.remove(
-            [*self.attached_bodies,
-            *self.attached_shapes,
-            *self.attached_constraints]
-            )
+        if len(self.attached_shapes) > 0:
+                space.remove(
+                    *self.attached_bodies,
+                    *self.attached_shapes,
+                    *self.attached_constraints
+                    )
 
     def render(self, screen, scale=None, anti_alias=False):
         raise NotImplemented('not implemented')
diff --git a/envs/create_game/tools/bucket.py b/envs/create_game/tools/bucket.py
index 494768f..580b615 100644
--- a/envs/create_game/tools/bucket.py
+++ b/envs/create_game/tools/bucket.py
@@ -59,7 +59,7 @@ class Bucket(FixedPoly):
         bucket.collision_type = self.collision_type
         bucket.locations = [self.center_position, self.v_1, self.v_2, self.v_3, self.v_4]
         self.shape = bucket
-        space.add(bucket)
+        space.add(self.get_body(), bucket)
         self.attached_shapes.append(bucket)
 
         # Called when 1 (movable objects) collides with 3 (bucket)
diff --git a/envs/create_game/tools/cannon.py b/envs/create_game/tools/cannon.py
index 62c8ba9..cd68bc8 100644
--- a/envs/create_game/tools/cannon.py
+++ b/envs/create_game/tools/cannon.py
@@ -60,6 +60,7 @@ class Cannon(FixedRect):
         cannon.collision_type = self.collision_type
         cannon.properties = (self.new_pos, self.launch_dir)
         self.shape = cannon
+        space.add(self.get_body())
         space.add(cannon)
         self.attached_shapes.append(cannon)
 
@@ -93,6 +94,7 @@ class Fan(FixedRect):
         fan.collision_type = self.collision_type
         fan.properties = self.launch_dir
         self.shape = fan
+        space.add(self.get_body())
         space.add(fan)
         self.attached_shapes.append(fan)
 
diff --git a/envs/create_game/tools/funnel.py b/envs/create_game/tools/funnel.py
index 4619843..526dced 100644
--- a/envs/create_game/tools/funnel.py
+++ b/envs/create_game/tools/funnel.py
@@ -59,7 +59,7 @@ class Funnel(FixedPoly):
         funnel.collision_type = self.collision_type
         funnel.locations = [self.nozzle_position, self.v_1, self.v_2, self.v_3]
         self.shape = funnel
-        space.add(funnel)
+        space.add(self.get_body(), funnel)
         self.attached_shapes.append(funnel)
 
         h = space.add_collision_handler(1, self.collision_type)
diff --git a/envs/create_game/tools/poly.py b/envs/create_game/tools/poly.py
index e875ef5..85adee4 100644
--- a/envs/create_game/tools/poly.py
+++ b/envs/create_game/tools/poly.py
@@ -14,7 +14,7 @@ class FixedPoly(FixedObj):
         self.body = self._create_body(mass, moment)
         self.body.position = pm.Vec2d(pos[0], pos[1])
 
-        self.vertices = self.get_vertices(pm.Vec2d([0., 0.]), n_sides, angle, size)
+        self.vertices = self.get_vertices(pm.Vec2d(0., 0.), n_sides, angle, size)
 
         self.shape = pm.Poly(self.body, self.vertices)
         self.shape.friction = friction
@@ -72,7 +72,7 @@ class Star(FixedPoly):
 
         pointlist = []
         for v in self.vertices:
-            x, y = pm.Vec2d(v).rotated(self.shape.body.angle) + self.shape.body.position
+            x, y = pm.Vec2d(v[0], v[1]).rotated(self.shape.body.angle) + self.shape.body.position
             point = scale * self.flipy([x, y])
             pointlist.append([int(point[0]), int(point[1])])
 
diff --git a/main.py b/main.py
index 2619157..d0be0ad 100644
--- a/main.py
+++ b/main.py
@@ -7,14 +7,14 @@ from method.embedder.embedder import extract_dists
 from method.models.main_method import MainMethod
 from method.models.distance_method import DistanceMethod
 
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 
 from arguments import get_args
 from rlf import get_env_interface, RunSettings, run_policy
 
 import envs.recogym
-import envs.block_stack
+# import envs.block_stack
 import envs.interfaces
 import envs.create_game
 
diff --git a/method/dist_mem.py b/method/dist_mem.py
index 7da3bf1..fbd625d 100644
--- a/method/dist_mem.py
+++ b/method/dist_mem.py
@@ -261,7 +261,8 @@ class DistributionMemory(object):
     def load_distributions(self, load_file):
         path = osp.join('method/embedder/saved_distributions', load_file + '.emb')
         print('loading dists from ' + path)
-        ckpt = torch.load(path)
+        # ckpt = torch.load(path)
+        ckpt = torch.load(path, map_location=torch.device('cpu'))
 
         self.mem = ckpt['mem']
         self.mem_keys = ckpt['mem_keys']
diff --git a/method/embedder/embedder.py b/method/embedder/embedder.py
index 4d2dc0e..08e3297 100644
--- a/method/embedder/embedder.py
+++ b/method/embedder/embedder.py
@@ -23,8 +23,8 @@ import sys
 import os
 import os.path as osp
 from tqdm import tqdm
-import pymunkoptions
-pymunkoptions.options["debug"] = False
+# import pymunkoptions
+# pymunkoptions.options["debug"] = False
 from rlf.rl import utils
 
 from torch.utils import data
diff --git a/requirements.txt b/requirements.txt
index 4cc4255..fcc248a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,14 @@
-absl-py==0.8.0
+absl-py
 argh==0.26.2
 astor==0.8.0
 backports.tempfile==1.0
 backports.weakref==1.0.post1
-cffi==1.12.3
+cffi
 chardet==3.0.4
 Click==7.0
+cloudpickle==3.0.0
 cycler==0.10.0
-Cython==0.29.13
+Cython<3
 decorator==4.4.0
 docker-pycreds==0.4.0
 future==0.17.1
@@ -18,60 +19,60 @@ glfw==1.8.3
 google-pasta==0.1.7
 gql==0.1.0
 graphql-core==2.2.1
-grpcio==1.24.0
+grpcio==1.59.3
 gym==0.10.8
-h5py==2.10.0
+h5py
 idna==2.8
-imageio==2.4.1
-joblib==0.13.2
+imageio==2.9.0
+joblib==1.3.2
 Keras-Applications==1.0.8
 Keras-Preprocessing==1.1.0
 kiwisolver==1.1.0
 libtmux==0.8.1
 lockfile==0.12.2
 Markdown==3.1.1
-matplotlib==3.1.2
+matplotlib==3.4
 moviepy==1.0.1
-mujoco-py==2.0.2.5
-numpy==1.15.2
+free-mujoco-py
+numpy==1.24.4
 nvidia-ml-py3==7.352.0
-opencv-python==4.0.0.21
-pandas==0.24.2
+opencv-python==4.9.0.80
+pandas==1.3.5
 pathtools==0.1.2
-Pillow==6.1.0
+Pillow==6.2.0
 promise==2.2.1
-protobuf==3.9.2
+protobuf==3.20.3
 psutil==5.6.3
 pycparser==2.19
-pygame==1.9.6
+pygame
 pyglet==1.4.4
-pymunk==5.4.2
+pymunk==6.6.0
 pyparsing==2.4.2
-PyQt5==5.13.2
-PyQt5-sip==12.7.0
+PyQt5==5.15.10
+PyQt5-sip==12.13.0
 python-dateutil==2.8.0
 pytz==2019.2
-PyYAML==5.1.2
+PyYAML
 requests==2.22.0
 Rx==1.6.1
-scikit-learn==0.21.3
-scipy==1.3.1
-seaborn==0.10.0
+scikit-learn
+scipy
+seaborn==0.13.2
 sentry-sdk==0.12.2
 shortuuid==0.5.0
 six==1.12.0
 sklearn==0.0
 smmap2==2.0.5
 subprocess32==3.5.4
-tensorboard==1.14.0
+tensorboard==2.13.0
 tensorboardX==1.8
-tensorflow==1.14.0
-tensorflow-estimator==1.14.0
+tensorflow==2.13.0rc0
+tensorflow-estimator
 termcolor==1.1.0
-torch==1.2.0
+torch
 tqdm==4.36.1
 urllib3==1.25.6
 wandb==0.8.3
 watchdog==0.9.0
-Werkzeug==0.16.0
+Werkzeug==1.0.1
 wrapt==1.11.2
diff --git a/rlf/baselines/vec_env/dummy_vec_env.py b/rlf/baselines/vec_env/dummy_vec_env.py
index 818bd53..4367f39 100644
--- a/rlf/baselines/vec_env/dummy_vec_env.py
+++ b/rlf/baselines/vec_env/dummy_vec_env.py
@@ -22,7 +22,7 @@ class DummyVecEnv(VecEnv):
         self.keys, shapes, dtypes = obs_space_info(obs_space)
 
         self.buf_obs = { k: np.zeros((self.num_envs,) + tuple(shapes[k]), dtype=dtypes[k]) for k in self.keys }
-        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool)
+        self.buf_dones = np.zeros((self.num_envs,), dtype=np.bool_)
         self.buf_rews  = np.zeros((self.num_envs,), dtype=np.float32)
         self.buf_infos = [{} for _ in range(self.num_envs)]
         self.actions = None
diff --git a/rlf/baselines/vec_env/shmem_vec_env.py b/rlf/baselines/vec_env/shmem_vec_env.py
index 7a4d78d..4d9fa7c 100644
--- a/rlf/baselines/vec_env/shmem_vec_env.py
+++ b/rlf/baselines/vec_env/shmem_vec_env.py
@@ -14,7 +14,7 @@ _NP_TO_CT = {np.float32: ctypes.c_float,
              np.int32: ctypes.c_int32,
              np.int8: ctypes.c_int8,
              np.uint8: ctypes.c_char,
-             np.bool: ctypes.c_bool}
+             np.bool_: ctypes.c_bool}
 
 
 class ShmemVecEnv(VecEnv):
diff --git a/rlf/main.py b/rlf/main.py
index dd7cd4f..dc304ee 100644
--- a/rlf/main.py
+++ b/rlf/main.py
@@ -95,6 +95,7 @@ def run_policy(run_settings):
     args.trajectory_len = None
     test_args.trajectory_len = None
 
+    print(args.num_processes)
     envs = make_vec_envs(args.env_name, args.seed, args.num_processes,
                          args.gamma, args.log_dir, args.device,
                          False, args.env_trans_fn, args)
diff --git a/rlf/rl/envs.py b/rlf/rl/envs.py
index b41b6b9..e59734f 100755
--- a/rlf/rl/envs.py
+++ b/rlf/rl/envs.py
@@ -264,8 +264,8 @@ class VecPyTorchFrameStack(VecEnvWrapper):
     def step_wait(self):
         obs, rews, news, infos = self.venv.step_wait()
 
-        self.stacked_obs[:, :-self.shape_dim0] = \
-            self.stacked_obs[:, self.shape_dim0:]
+        a = self.stacked_obs.clone()
+        self.stacked_obs[:, :-self.shape_dim0] = a[:, self.shape_dim0:]
         for (i, new) in enumerate(news):
             if new:
                 self.stacked_obs[i] = 0
